classDiagram
    class IDatabaseSetupContainer {
		<<interface>>
        +Setups: IReadOnlyDictionary＜string, IDatabaseSetup＞
        +GetSetup(sectionName: string): IDatabaseSetup
        +UpdateSetup(sectionName: string, connectionInfo: IDbConnectionInfo): void
    }

    class IDatabaseSetup {
    	<<interface>>
        +DatabaseType: DatabaseType
        +DAL: ICoreDAL
        +GetConnectionString(): string
        +GetConnectionInfo(): IDbConnectionInfo
        +UpdateConnectionInfo(connectionInfo: IDbConnectionInfo): void
    }

    class DatabaseSetup {
        -_iniFileHelper: IIniFileHelper
        -_cryptoManager: ICryptoManager
        -_sectionName: string
        +DatabaseType: DatabaseType
        +DAL: ICoreDAL
        -Decrypt(settings: Dictionary＜string, string＞): void
        -Encrypt(settings: Dictionary＜string, string＞): void
    }

    class DatabaseType {
        <<enumeration>>
        NONE
        MSSQL
        ORACLE
        END
    }

    class DatabaseParameterProcessor {
        -_parameterHandler: IDbParameterHandler
        -_dbType: DatabaseType
        +AddParameters(IDbConnection, IDbCommand, ISQLParam): void
        +AddParameters(IDbConnection, IDbCommand, Dictionary＜string, object＞): void
        +AddReturnParam(IDbConnection, IDbCommand): void
        +SetValueOutputParameters(IDbConnection, IDbCommand): void
        +SetValueOutputParameters(IDbConnection, Dictionary＜string, object＞): void
        +SetReturnValue(IDbCommand): int
        -CreateParameterHandler(DatabaseType): IDbParameterHandler
    }

    class SQLResult {
        +IsSuccess: bool
        +Message: string
        +DataSet: DataSet
        +ReturnValue: int
        +static Success(DataSet, string)
        +static Fail(string)
    }

namespace Factory{
    class DbDalFactory {
        +static CreateCoreDal(DatabaseType): ICoreDAL
        -static CreateNewInstance(DatabaseType): ICoreDAL
    }

    class DbConnectionFactory {
        +static CreateConnectionInfo(DatabaseType, Dictionary): IDbConnectionInfo
    }
}

namespace Extensions{
    class DbParameterAttribute {
        <<Attribute>>
        +Name: string
        +DbType: DbType
        +Direction: ParameterDirection
    }

    class SystemDataExtensions {
        <<Extension Method>>
        +static ToObject＜T＞(table: this DataTable)
        +static ToObject＜T＞(row: this DataRow)
    }
}

namespace connectionInfo{
    class IDbConnectionInfo {
    	<<interface>>
        +DatabaseType: DatabaseType
        +ToConnectionString(): string
        +Validate(out string): bool
        +LoadFromSettings(settings: Dictionary＜string, string＞): IDbConnectionInfo
        +ToSettings(): Dictionary
    }

    class MsSqlConnectionInfo {
        +Server: string
        +Database: string
        +UserId: string
        +Password: string
        +IntegratedSecurity: bool
        +Port: int
    }

    class OracleConnectionInfo {
        +Host: string
        +Port: int
        +ServiceName: string
        +UserId: string
        +Password: string
        +Protocol: string
    }
}

namespace DAL {
    class ICoreDAL {
    	<<interface>>
        +TestConnectionAsync(dbSetup: IDatabaseSetup): Task<SQLResult>
        +TestConnectionAsync(connectionString: string): Task<SQLResult>
        +ExecuteProcedure(IDatabaseSetup, string, ISQLParam): SQLResult
        +ExecuteProcedure(IDatabaseSetup, string, Dictionary<string, object>): SQLResult
        +ExecuteProcedureAsync(IDatabaseSetup, string, ISQLParam): Task＜SQLResult＞
        +ExecuteProcedureAsync(IDatabaseSetup, string, Dictionary<string, object>): Task＜SQLResult＞
    }

    class SqlServerDAL {
        -_instance: Lazy
        -_timeout: int
        -_parameterProcessor: DatabaseParameterProcessor
        -ExecuteProcedureInternal(IDatabaseSetup, string, Action<IDbConnection, IDbCommand>, Action<IDbCommand>): SQLResult
        -ExecuteProcedureInternalAsync(IDatabaseSetup, string, Action<IDbConnection, IDbCommand>, Action<IDbCommand>): Task＜SQLResult＞
    }

    class OracleDAL {
        -_instance: Lazy
        -_timeout: int
        -_parameterProcessor: DatabaseParameterProcessor
        -ExecuteProcedureInternal(IDatabaseSetup, string, Action<IDbConnection, IDbCommand>, Action<IDbCommand>): SQLResult
        -ExecuteProcedureInternalAsync(IDatabaseSetup, string, Action<IDbConnection, IDbCommand>, Action<IDbCommand>): Task＜SQLResult＞
    }
}

namespace Handler {
    class IDbParameterHandler {
        <<interface>>
        +NormalizeParameterName(paramName: string): string
        +AddParameterPrefix(paramName: string): string
        +CreateParameter(parameter: IDbDataParameter, value: object): IDbDataParameter
        +CreateReturnParameter(): IDbDataParameter
        +GetProcedureParameterCollection(IDbConnection, IDbCommand): DbParameterCollection
        +SetOutputParameter(IDbCommand, ISQLParam): void
        +SetOutputParameter(IDbCommand, Dictionary＜string, object＞): void
    }

    class SqlServerParameterHandler {

    }

    class OracleParameterHandler {

    }
}

    IDatabaseSetupContainer o.. "*" IDatabaseSetup: contains
    IDatabaseSetup <|.. DatabaseSetup: implements
    DatabaseSetup --> IDbConnectionInfo: manages
    DatabaseSetup --> ICoreDAL: uses

    ICoreDAL <|.. SqlServerDAL: implements
    ICoreDAL <|.. OracleDAL: implements

    SqlServerDAL --> DatabaseParameterProcessor: has
    OracleDAL --> DatabaseParameterProcessor: has

    DatabaseParameterProcessor --> IDbParameterHandler: uses
    IDbParameterHandler <|.. SqlServerParameterHandler: implements
    IDbParameterHandler <|.. OracleParameterHandler: implements
    
    IDbConnectionInfo <|-- MsSqlConnectionInfo: extends
    IDbConnectionInfo <|-- OracleConnectionInfo: extends